// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: wibuzone/v1/distiller.proto

package wibuzonev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DistilledWebpage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DistilledWebpage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DistilledWebpage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DistilledWebpageMultiError, or nil if none found.
func (m *DistilledWebpage) ValidateAll() error {
	return m.validate(true)
}

func (m *DistilledWebpage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Author

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetPublishedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DistilledWebpageValidationError{
					field:  "PublishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DistilledWebpageValidationError{
					field:  "PublishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublishedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DistilledWebpageValidationError{
				field:  "PublishedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TextContent

	// no validation rules for HtmlContent

	if len(errors) > 0 {
		return DistilledWebpageMultiError(errors)
	}

	return nil
}

// DistilledWebpageMultiError is an error wrapping multiple validation errors
// returned by DistilledWebpage.ValidateAll() if the designated constraints
// aren't met.
type DistilledWebpageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistilledWebpageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistilledWebpageMultiError) AllErrors() []error { return m }

// DistilledWebpageValidationError is the validation error returned by
// DistilledWebpage.Validate if the designated constraints aren't met.
type DistilledWebpageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistilledWebpageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistilledWebpageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistilledWebpageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistilledWebpageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistilledWebpageValidationError) ErrorName() string { return "DistilledWebpageValidationError" }

// Error satisfies the builtin error interface
func (e DistilledWebpageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistilledWebpage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistilledWebpageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistilledWebpageValidationError{}

// Validate checks the field values on DistilledWebpageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DistilledWebpageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DistilledWebpageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DistilledWebpageRequestMultiError, or nil if none found.
func (m *DistilledWebpageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DistilledWebpageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return DistilledWebpageRequestMultiError(errors)
	}

	return nil
}

// DistilledWebpageRequestMultiError is an error wrapping multiple validation
// errors returned by DistilledWebpageRequest.ValidateAll() if the designated
// constraints aren't met.
type DistilledWebpageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistilledWebpageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistilledWebpageRequestMultiError) AllErrors() []error { return m }

// DistilledWebpageRequestValidationError is the validation error returned by
// DistilledWebpageRequest.Validate if the designated constraints aren't met.
type DistilledWebpageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistilledWebpageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistilledWebpageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistilledWebpageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistilledWebpageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistilledWebpageRequestValidationError) ErrorName() string {
	return "DistilledWebpageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DistilledWebpageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistilledWebpageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistilledWebpageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistilledWebpageRequestValidationError{}

// Validate checks the field values on DistilledWebpageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DistilledWebpageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DistilledWebpageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DistilledWebpageResponseMultiError, or nil if none found.
func (m *DistilledWebpageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DistilledWebpageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDistilledWebpage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DistilledWebpageResponseValidationError{
					field:  "DistilledWebpage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DistilledWebpageResponseValidationError{
					field:  "DistilledWebpage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDistilledWebpage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DistilledWebpageResponseValidationError{
				field:  "DistilledWebpage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DistilledWebpageResponseMultiError(errors)
	}

	return nil
}

// DistilledWebpageResponseMultiError is an error wrapping multiple validation
// errors returned by DistilledWebpageResponse.ValidateAll() if the designated
// constraints aren't met.
type DistilledWebpageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistilledWebpageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistilledWebpageResponseMultiError) AllErrors() []error { return m }

// DistilledWebpageResponseValidationError is the validation error returned by
// DistilledWebpageResponse.Validate if the designated constraints aren't met.
type DistilledWebpageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistilledWebpageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistilledWebpageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistilledWebpageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistilledWebpageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistilledWebpageResponseValidationError) ErrorName() string {
	return "DistilledWebpageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DistilledWebpageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistilledWebpageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistilledWebpageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistilledWebpageResponseValidationError{}
